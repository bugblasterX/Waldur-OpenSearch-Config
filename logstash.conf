input {
# Exec runs our python script which fetches the data from our API endpoint and prints to stdout, which logstash ingests.
exec {
    command => "python3  /usr/share/logstash/python_event_script.py"
    interval => 60  # Run the script every 60 seconds (1 minutes)
    codec => "json"
  }
# Logstash endpoint, listens on port for incoming data
http {
    port => 5044
    codec => "json"
  }
}


filter {

  if [context][project_end_date] == "None" or [context][scope_end_date] == "None" {
    mutate {
      remove_field => ["[context][project_end_date]", "[context][scope_end_date]"]
    }
  }

 if [event_type]  == "resource_creation_succeeded" or [event_type]  == "resource_deletion_succeeded" or [event_type]  == "resource_update_succeeded" {
    http {
      url => "https://opensearch-node1:9200/logging_event_business/_search"
      verb => "GET"
      ssl_verification_mode => none
      user => "${OPENSEARCH_USER}"
      password => "${OPENSEARCH_PASSWORD}"
      body => '{
  "size": 0,
  "query": {
    "bool": {
      "must": [
        {
          "range": {
            "@timestamp": {
              "from": "%{[created]}||-15m",
              "to": "%{[created]}||+1m"
            }
          }
        },
        {
          "terms": {
            "event_type": ["%{[event_type]}"]
          }
        },
        {
          "term": {
            "context.project_uuid.keyword": "%{[context][project_uuid]}"  
          }
        }
      ]
    }
  },
  "aggs": {
     "resource_count": {
      "value_count": {
        "field": "context.project_uuid.keyword"
      }
    }
  }
}'
      body_format => "json"
      target_body => "opensearch_resource_newd_data"
    }


ruby {
    code => '
      require "securerandom"
      require "time"

      incoming_event_type = event.get("event_type")
        case incoming_event_type
        when "resource_creation_succeeded"
          message = "More than 10 resources created in a short time span for project"
          event_type = "resource_creation_exceeded"
        when "resource_deletion_succeeded"
          message = "More than 10 resources deleted in a short time span for project"
          event_type = "resource_deletion_exceeded"
        when "resource_update_succeeded"
          message = "More than 10 resources updated in a short time span for project"
          event_type = "resource_update_exceeded"
        else
          next  
        end

        buckets_path = "[opensearch_resource_newd_data][aggregations][resource_count][value]"
        logger.warn("Buckets path: #{buckets_path}")
        #logger.info("THE BUCKETS IS :", "value" => event.get(buckets_path)
        buckets = event.get(buckets_path)
	      created_time = event.get("created")
        if buckets
            if buckets.to_i > 10
              new_event = LogStash::Event.new(
                "project_uuid" => event.get("[context][project_uuid]"),
                "created" => created_time,
                "event_type" => event_type,
                "message" => message,
                "uuid" => SecureRandom.uuid
              )
              new_event_block.call(new_event)
            end
        end
     
    '
  }
}


  mutate {
    remove_field => ["opensearch_parsed_resource_data", "opensearch_resource_new_data", "opensearch_resource_new_data", "[process][exit_code]", "[event][original]", "[process][command_line]", "opensearch_login_data"]
  }

# Age filter could be used to drop events that are older than a certain time value.
#  age {}
#  if [@metadata][age] > 300 {
#    drop {}
#  }

  if [event_type] == "auth_logged_in_with_username" {

    http {
      url => "https://opensearch-node1:9200/logging_event_business/_search"
      verb => "GET"
      ssl_verification_mode => none
      user => "${OPENSEARCH_USER}"
      password => "${OPENSEARCH_PASSWORD}"
      body => '{"query":{"bool":{"must":[{"term":{"context.ip_address":"%{[context][ip_address]}"}}, {"term":{"event_type":"auth_logged_in_with_username"}}]}},"size":0}'
      body_format => "json"
      target_body => "opensearch_response"
    }

    http {
      url => "https://opensearch-node1:9200/logging_event_business/_search"
      verb => "GET"
      ssl_verification_mode => none
      user => "${OPENSEARCH_USER}"
      password => "${OPENSEARCH_PASSWORD}"
      body => '{
  "size": 0,
  "query": {
    "bool": {
      "must": [
        {
          "range": {
            "@timestamp": {
              "from": "%{[created]}||-5m",
              "to": "%{[created]}||+1m"
            }
          }
        },
        {
          "terms": {
            "event_type": ["auth_logged_in_with_username"]
          }
        }
      ]
    }
  },
  "aggs": {
    "multiple_login_detected": {
      "filter": {
        "term": { "event_type": "auth_logged_in_with_username" }
      },
      "aggs": {
        "login_count": {
        "multi_terms": {
        "terms": [
          {
          "field": "context.user_username.keyword" 
        },
        {
          "field": "context.user_uuid.keyword"
        }
        ]
      },
          "aggs": {
            "total_logins": {
              "value_count": {
                "field": "context.user_uuid.keyword"
              }
            },
            "project_filter": {
              "bucket_selector": {
                "buckets_path": {
                  "totalLogins": "total_logins"
                },
                "script": "params.totalLogins > 4"
              }
            }
          }
        }
      }
    }
  }
}'
      body_format => "json"
      target_body => "opensearch_login_data"
    }

  ruby {
    code => "
      require 'securerandom'
      require 'time'
      buckets = event.get('[opensearch_login_data][aggregations][multiple_login_detected][login_count][buckets]')
      created_time = event.get('created')
      if buckets && !buckets.empty?
        buckets.each do |bucket|
          if bucket['doc_count'] > 0
            new_event = LogStash::Event.new(
              'username' => bucket['key'][0],
	      'user_uuid' => bucket['key'][1],
              'created' => Time.now.utc.iso8601,
              'created' => created_time,
	      'event_type' => 'multiple_logins_detected',
              'message' => 'Multiple login attempts detected for the user in a short time span',
              'uuid' => SecureRandom.uuid
            )
            new_event_block.call(new_event)
          end
        end
      end
#      event.remove('opensearch_login_data')
      if event.get('[opensearch_response][hits][total][value]').to_i < 1
        event.set('new_ip', 'True')
      else
        event.set('new_ip', 'False')
      end
      event.remove('opensearch_response')
      "
    }

  }

  if [context][user_uuid] {
 
   http {
      url => "https://opensearch-node1:9200/logging_event_business/_search"
      verb => "GET"
      ssl_verification_mode => none
      user => "${OPENSEARCH_USER}"
      password => "${OPENSEARCH_PASSWORD}"
      body => '{"size": 0,"query": {"bool": {"must": [{"exists": {"field": "context.user_uuid","boost": 1}},{"range": {"@timestamp": {"from": "%{[created]}||-5m","to": "%{[created]}||+1m","include_lower": true,"include_upper": false,"boost": 1}}},{"term": {"context.user_uuid.keyword":  "%{[context][user_uuid]}"}}],"adjust_pure_negative": true,"boost": 1}},"aggregations": {"multiple_ips": {"cardinality": {"field": "context.ip_address.keyword"}}}} '
      body_format => "json"
      target_body => "multiple_ip_response"
    }

  ruby {
    code => "
      if event.get('[multiple_ip_response][aggregations][multiple_ips][value]').to_i > 1
        event.set('multiple_ip_detected', 'True')
      else
        event.set('multiple_ip_detected', 'False')
      end
      #event.remove('multiple_ip_response')
    "
  }

}
#Timestamps to be based on created field.
  date {
    match => ["created", "ISO8601"]
  }

}



output {

     stdout { codec => rubydebug
      { metadata => true }
    }
  opensearch {
    hosts => ["https://opensearch-node1:9200","https://opensearch-node2:9200"]
    user => "${OPENSEARCH_USER}"
    password => "${OPENSEARCH_PASSWORD}"
    ssl_certificate_verification => false
    index => "logging_event_business"
    # UUID is already present in incoming events and is unique, will be used as the document's ID within OpenSearch
    document_id => "%{[uuid]}"
    action => "create"
  }
}
